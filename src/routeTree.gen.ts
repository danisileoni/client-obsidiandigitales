/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ShoppingCartIndexImport } from './routes/shopping-cart/index'
import { Route as ProductIndexImport } from './routes/product/index'
import { Route as ProductProductSlugImport } from './routes/product/$productSlug'
import { Route as ShoppingCartPaymentIdOrderImport } from './routes/shopping-cart/payment/$idOrder'
import { Route as ShoppingCartPaymentProcessPaymentIdOrderImport } from './routes/shopping-cart/payment/process-payment/$idOrder'
import { Route as AuthUserConfigUseridImport } from './routes/auth/user/config/$userid'
import { Route as AuthUserBuysUseridImport } from './routes/auth/user/buys/$userid'
import { Route as AdminDashboardPanelUsersImport } from './routes/admin/dashboard/panel/users'
import { Route as AdminDashboardPanelProductsImport } from './routes/admin/dashboard/panel/products'
import { Route as AdminDashboardPanelPaymentsImport } from './routes/admin/dashboard/panel/payments'
import { Route as AdminDashboardPanelHomeImport } from './routes/admin/dashboard/panel/home'
import { Route as AdminDashboardPanelDiscountsImport } from './routes/admin/dashboard/panel/discounts'
import { Route as AdminDashboardPanelAccountsImport } from './routes/admin/dashboard/panel/accounts'

// Create Virtual Routes

const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const LegalPolicyLazyImport = createFileRoute('/legal-policy')()
const GeneralConditionsLazyImport = createFileRoute('/general-conditions')()
const FaqLazyImport = createFileRoute('/faq')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AdminDashboardLoginLazyImport = createFileRoute(
  '/admin/dashboard/login',
)()

// Create/Update Routes

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const LegalPolicyLazyRoute = LegalPolicyLazyImport.update({
  path: '/legal-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/legal-policy.lazy').then((d) => d.Route))

const GeneralConditionsLazyRoute = GeneralConditionsLazyImport.update({
  path: '/general-conditions',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/general-conditions.lazy').then((d) => d.Route),
)

const FaqLazyRoute = FaqLazyImport.update({
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/faq.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ShoppingCartIndexRoute = ShoppingCartIndexImport.update({
  path: '/shopping-cart/',
  getParentRoute: () => rootRoute,
} as any)

const ProductIndexRoute = ProductIndexImport.update({
  path: '/product/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const ProductProductSlugRoute = ProductProductSlugImport.update({
  path: '/product/$productSlug',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardLoginLazyRoute = AdminDashboardLoginLazyImport.update({
  path: '/admin/dashboard/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/dashboard/login.lazy').then((d) => d.Route),
)

const ShoppingCartPaymentIdOrderRoute = ShoppingCartPaymentIdOrderImport.update(
  {
    path: '/shopping-cart/payment/$idOrder',
    getParentRoute: () => rootRoute,
  } as any,
)

const ShoppingCartPaymentProcessPaymentIdOrderRoute =
  ShoppingCartPaymentProcessPaymentIdOrderImport.update({
    path: '/shopping-cart/payment/process-payment/$idOrder',
    getParentRoute: () => rootRoute,
  } as any)

const AuthUserConfigUseridRoute = AuthUserConfigUseridImport.update({
  path: '/auth/user/config/$userid',
  getParentRoute: () => rootRoute,
} as any)

const AuthUserBuysUseridRoute = AuthUserBuysUseridImport.update({
  path: '/auth/user/buys/$userid',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardPanelUsersRoute = AdminDashboardPanelUsersImport.update({
  path: '/admin/dashboard/panel/users',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardPanelProductsRoute =
  AdminDashboardPanelProductsImport.update({
    path: '/admin/dashboard/panel/products',
    getParentRoute: () => rootRoute,
  } as any)

const AdminDashboardPanelPaymentsRoute =
  AdminDashboardPanelPaymentsImport.update({
    path: '/admin/dashboard/panel/payments',
    getParentRoute: () => rootRoute,
  } as any)

const AdminDashboardPanelHomeRoute = AdminDashboardPanelHomeImport.update({
  path: '/admin/dashboard/panel/home',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardPanelDiscountsRoute =
  AdminDashboardPanelDiscountsImport.update({
    path: '/admin/dashboard/panel/discounts',
    getParentRoute: () => rootRoute,
  } as any)

const AdminDashboardPanelAccountsRoute =
  AdminDashboardPanelAccountsImport.update({
    path: '/admin/dashboard/panel/accounts',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqLazyImport
      parentRoute: typeof rootRoute
    }
    '/general-conditions': {
      id: '/general-conditions'
      path: '/general-conditions'
      fullPath: '/general-conditions'
      preLoaderRoute: typeof GeneralConditionsLazyImport
      parentRoute: typeof rootRoute
    }
    '/legal-policy': {
      id: '/legal-policy'
      path: '/legal-policy'
      fullPath: '/legal-policy'
      preLoaderRoute: typeof LegalPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/$productSlug': {
      id: '/product/$productSlug'
      path: '/product/$productSlug'
      fullPath: '/product/$productSlug'
      preLoaderRoute: typeof ProductProductSlugImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/': {
      id: '/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductIndexImport
      parentRoute: typeof rootRoute
    }
    '/shopping-cart/': {
      id: '/shopping-cart/'
      path: '/shopping-cart'
      fullPath: '/shopping-cart'
      preLoaderRoute: typeof ShoppingCartIndexImport
      parentRoute: typeof rootRoute
    }
    '/shopping-cart/payment/$idOrder': {
      id: '/shopping-cart/payment/$idOrder'
      path: '/shopping-cart/payment/$idOrder'
      fullPath: '/shopping-cart/payment/$idOrder'
      preLoaderRoute: typeof ShoppingCartPaymentIdOrderImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/login': {
      id: '/admin/dashboard/login'
      path: '/admin/dashboard/login'
      fullPath: '/admin/dashboard/login'
      preLoaderRoute: typeof AdminDashboardLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/panel/accounts': {
      id: '/admin/dashboard/panel/accounts'
      path: '/admin/dashboard/panel/accounts'
      fullPath: '/admin/dashboard/panel/accounts'
      preLoaderRoute: typeof AdminDashboardPanelAccountsImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/panel/discounts': {
      id: '/admin/dashboard/panel/discounts'
      path: '/admin/dashboard/panel/discounts'
      fullPath: '/admin/dashboard/panel/discounts'
      preLoaderRoute: typeof AdminDashboardPanelDiscountsImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/panel/home': {
      id: '/admin/dashboard/panel/home'
      path: '/admin/dashboard/panel/home'
      fullPath: '/admin/dashboard/panel/home'
      preLoaderRoute: typeof AdminDashboardPanelHomeImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/panel/payments': {
      id: '/admin/dashboard/panel/payments'
      path: '/admin/dashboard/panel/payments'
      fullPath: '/admin/dashboard/panel/payments'
      preLoaderRoute: typeof AdminDashboardPanelPaymentsImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/panel/products': {
      id: '/admin/dashboard/panel/products'
      path: '/admin/dashboard/panel/products'
      fullPath: '/admin/dashboard/panel/products'
      preLoaderRoute: typeof AdminDashboardPanelProductsImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/panel/users': {
      id: '/admin/dashboard/panel/users'
      path: '/admin/dashboard/panel/users'
      fullPath: '/admin/dashboard/panel/users'
      preLoaderRoute: typeof AdminDashboardPanelUsersImport
      parentRoute: typeof rootRoute
    }
    '/auth/user/buys/$userid': {
      id: '/auth/user/buys/$userid'
      path: '/auth/user/buys/$userid'
      fullPath: '/auth/user/buys/$userid'
      preLoaderRoute: typeof AuthUserBuysUseridImport
      parentRoute: typeof rootRoute
    }
    '/auth/user/config/$userid': {
      id: '/auth/user/config/$userid'
      path: '/auth/user/config/$userid'
      fullPath: '/auth/user/config/$userid'
      preLoaderRoute: typeof AuthUserConfigUseridImport
      parentRoute: typeof rootRoute
    }
    '/shopping-cart/payment/process-payment/$idOrder': {
      id: '/shopping-cart/payment/process-payment/$idOrder'
      path: '/shopping-cart/payment/process-payment/$idOrder'
      fullPath: '/shopping-cart/payment/process-payment/$idOrder'
      preLoaderRoute: typeof ShoppingCartPaymentProcessPaymentIdOrderImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AboutLazyRoute,
  FaqLazyRoute,
  GeneralConditionsLazyRoute,
  LegalPolicyLazyRoute,
  PrivacyPolicyLazyRoute,
  ProductProductSlugRoute,
  AuthLoginLazyRoute,
  AuthRegisterLazyRoute,
  ProductIndexRoute,
  ShoppingCartIndexRoute,
  ShoppingCartPaymentIdOrderRoute,
  AdminDashboardLoginLazyRoute,
  AdminDashboardPanelAccountsRoute,
  AdminDashboardPanelDiscountsRoute,
  AdminDashboardPanelHomeRoute,
  AdminDashboardPanelPaymentsRoute,
  AdminDashboardPanelProductsRoute,
  AdminDashboardPanelUsersRoute,
  AuthUserBuysUseridRoute,
  AuthUserConfigUseridRoute,
  ShoppingCartPaymentProcessPaymentIdOrderRoute,
})

/* prettier-ignore-end */
